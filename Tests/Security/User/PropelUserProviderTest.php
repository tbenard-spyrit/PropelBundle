<?php

/**
 * This file is part of the PropelBundle package.
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 *
 * @license    MIT License
 */

namespace Propel\Bundle\PropelBundle\Tests\Security\User;

use Propel\Generator\Util\QuickBuilder;

use Propel\Bundle\PropelBundle\Security\User\PropelUserProvider;
use Propel\Bundle\PropelBundle\Tests\Fixtures\Model\User;
use Propel\Bundle\PropelBundle\Tests\TestCase;
use Symfony\Component\Security\Core\Exception\UserNotFoundException;

/**
 * @author William Durand <william.durand1@gmail.com>
 *
 * NOTE: currently no driver is selected "sqlite" will be used by default
 */
class PropelUserProviderTest extends TestCase
{
    public static $con = null;

    public function setUp(): void
    {
        // ensure build is called only once
        if (empty($this::$con)) {
            $schema = <<<SCHEMA
    <database name="users" defaultIdMethod="native" namespace="Propel\\Bundle\\PropelBundle\\Tests\\Fixtures\\Model">
        <table name="user">
            <column name="id" type="integer" required="true" primaryKey="true" autoIncrement="true" />
            <column name="username" type="varchar" size="255" primaryString="true" />
            <column name="algorithm" type="varchar" size="50" />
            <column name="salt" type="varchar" size="255" />
            <column name="password" type="varchar" size="255" />
            <column name="expires_at" type="timestamp" />
            <column name="roles" type="array" />
        </table>
    </database>
    SCHEMA;

            $builder = new QuickBuilder();
            $builder->setSchema($schema);
            $classTargets = array('tablemap', 'object', 'query', /*'objectstub',*/ 'querystub');

            $this::$con = $builder->build($dsn = null, $user = null, $pass = null, $adapter = null, $classTargets);

        }
    }

    public function tearDown(): void
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    public function testRefreshUserGetsUserByPrimaryKey()
    {
        $user1 = new User();
        $user1->setUsername('user1');
        $user1->save();

        $user2 = new User();
        $user2->setUsername('user2');
        $user2->save();

        $provider = new PropelUserProvider('Propel\Bundle\PropelBundle\Tests\Fixtures\Model\User', 'username');

        // try to change the user identity
        $user1->setUsername('user2');

        $resultUser = $provider->refreshUser($user1);
        $this->assertSame($user1, $resultUser);
    }

    public function testLoadUserByUsername() {
        $user1 = new User();
        $user1->setUsername('user1');
        $user1->save();

        $provider = new PropelUserProvider('Propel\Bundle\PropelBundle\Tests\Fixtures\Model\User', 'username');

        // existing one
        $this->assertInstanceOf(User::class, $provider->loadUserByUsername('user1'));

        // not existing one
        // because this branch work with both s5 and s6
        if (class_exists('Symfony\Component\Security\Core\Exception\UsernameNotFoundException')) {
            $this->expectException('Symfony\Component\Security\Core\Exception\UsernameNotFoundException');
        } else {
            $this->expectException(UserNotFoundException::class);
        }

        $provider->loadUserByUsername('not_exists');
    }

    public function testSupportsClass() {
        $class = 'Propel\Bundle\PropelBundle\Tests\Fixtures\Model\User';

        $provider = new PropelUserProvider($class, 'username');

        $this->assertTrue($provider->supportsClass($class));
        $this->assertFalse($provider->supportsClass('\AnotherClass'));
    }

    public function testLoadUserByIdentifier() {
        $user1 = new User();
        $user1->setUsername('user1');
        $user1->save();

        $provider = new PropelUserProvider('Propel\Bundle\PropelBundle\Tests\Fixtures\Model\User', 'username');

        // existing one
        $this->assertInstanceOf(User::class, $provider->loadUserByIdentifier('user1'));

        // not existing one
        // because this branch work with both s5 and s6
        if (class_exists('Symfony\Component\Security\Core\Exception\UsernameNotFoundException')) {
            $this->expectException('Symfony\Component\Security\Core\Exception\UsernameNotFoundException');
        } else {
            $this->expectException(UserNotFoundException::class);
        }

        $provider->loadUserByUsername('not_exists');
    }
}
